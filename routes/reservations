const express = require('express');
const router = express.Router();
const Reservation = require('//Reservation');

/**
 * @route GET /:id/reservations
 * @desc Récupérer toutes les réservations d'un catway donné (paramètre : catwayNumber)
 */
router.get('/:id/reservations', async (req, res) => {
  try {
    const catwayNumber = parseInt(req.params.id);
    const reservations = await Reservation.find({ catwayNumber });
    res.json(reservations);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

/**
 * @route GET /:id/reservations/:idReservation
 * @desc Récupérer les détails d'une réservation précise
 */
router.get('/:id/reservations/:idReservation', async (req, res) => {
  try {
    const reservation = await Reservation.findById(req.params.idReservation);
    if (!reservation) {
      return res.status(404).json({ error: "Réservation non trouvée" });
    }
    res.json(reservation);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});






/**
 * @route POST /:id/reservations
 * @desc Créer une nouvelle réservation pour un catway donné
 * @param {Number} req.params.id - Le numéro du catway
 * @param {String} req.body.clientName - Nom du client
 * @param {String} req.body.boatName - Nom du bateau
 * @param {Date} req.body.startDate - Date de début de la réservation
 * @param {Date} req.body.endDate - Date de fin de la réservation
 */
router.post('/:id/reservations', async (req, res) => {
  try {
    const catwayNumber = parseInt(req.params.id);
    const { clientName, boatName, startDate, endDate } = req.body;
    const newReservation = new Reservation({
      catwayNumber,
      clientName,
      boatName,
      startDate,
      endDate,
    });
    await newReservation.save();
    res.status(201).json(newReservation);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

/**
 * @route PUT /:id/reservations/:idReservation
 * @desc Mettre à jour une réservation existante
 */
router.put('/:id/reservations/:idReservation', async (req, res) => {
  try {
    const updatedReservation = await Reservation.findByIdAndUpdate(
      req.params.idReservation,
      req.body,
      { new: true }
    );
    if (!updatedReservation) {
      return res.status(404).json({ error: "Réservation non trouvée" });
    }
    res.json(updatedReservation);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

/**
 * @route DELETE /:id/reservations/:idReservation
 * @desc Supprimer une réservation existante
 */
router.delete('/:id/reservations/:idReservation', async (req, res) => {
  try {
    const deletedReservation = await Reservation.findByIdAndDelete(req.params.idReservation);
    if (!deletedReservation) {
      return res.status(404).json({ error: "Réservation non trouvée" });
    }
    res.json({ message: "Réservation supprimée" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;
