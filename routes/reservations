const express = require("express");
const router = express.Router();
const Reservation = require("../models/reservation");
const Catway = require("../models/Catway");

// üìå GET : Liste toutes les r√©servations d'un catway
router.get("/:id/reservations", async (req, res) => {
  try {
    const reservations = await Reservation.find({ catwayNumber: req.params.id });
    res.json(reservations);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// üìå GET : R√©cup√©rer une r√©servation sp√©cifique
router.get("/:id/reservations/:reservationId", async (req, res) => {
  try {
    const reservation = await Reservation.findById(req.params.reservationId);
    if (!reservation) return res.status(404).json({ error: "R√©servation non trouv√©e" });
    res.json(reservation);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// üìå POST : Ajouter une r√©servation √† un catway
router.post("/:id/reservations", async (req, res) => {
  try {
    const { clientName, boatName, startDate, endDate } = req.body;

    // V√©rifier si le catway existe
    const catway = await Catway.findOne({ catwayNumber: req.params.id });
    if (!catway) return res.status(404).json({ error: "Catway non trouv√©" });

    // V√©rifier si le catway est d√©j√† r√©serv√© √† cette p√©riode
    const existingReservations = await Reservation.find({
      catwayNumber: req.params.id,
      $or: [
        { startDate: { $lte: endDate }, endDate: { $gte: startDate } },
      ],
    });

    if (existingReservations.length > 0) {
      return res.status(400).json({ error: "Catway d√©j√† r√©serv√© pour cette p√©riode" });
    }

    const newReservation = new Reservation({
      catwayNumber: req.params.id,
      clientName,
      boatName,
      startDate,
      endDate,
    });

    await newReservation.save();
    res.status(201).json(newReservation);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// üìå PUT : Modifier une r√©servation
router.put("/:id/reservations/:reservationId", async (req, res) => {
  try {
    const { clientName, boatName, startDate, endDate } = req.body;
    const updatedReservation = await Reservation.findByIdAndUpdate(
      req.params.reservationId,
      { clientName, boatName, startDate, endDate },
      { new: true }
    );
    if (!updatedReservation) return res.status(404).json({ error: "R√©servation non trouv√©e" });
    res.json(updatedReservation);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// üìå DELETE : Supprimer une r√©servation
router.delete("/:id/reservations/:reservationId", async (req, res) => {
  try {
    const deletedReservation = await Reservation.findByIdAndDelete(req.params.reservationId);
    if (!deletedReservation) return res.status(404).json({ error: "R√©servation non trouv√©e" });
    res.json({ message: "R√©servation supprim√©e" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;
