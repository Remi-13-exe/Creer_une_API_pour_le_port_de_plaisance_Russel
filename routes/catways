const express = require("express");
const router = express.Router();
const Catway = require("../models/Catway");

// üìå GET : R√©cup√©rer tous les catways
router.get("/", async (req, res) => {
  try {
    const catways = await Catway.find();
    res.json(catways);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// üìå GET : R√©cup√©rer un catway par son catwayNumber
router.get("/:id", async (req, res) => {
  try {
    // Convertir le param√®tre d'ID en nombre
    const catwayNumber = parseInt(req.params.id);

    // V√©rification que l'ID est bien un nombre
    if (isNaN(catwayNumber)) {
      return res.status(400).json({ error: "Le param√®tre catwayNumber doit √™tre un nombre valide." });
    }

    // Recherche par catwayNumber (pas par _id) et renvoi tous les r√©sultats correspondants
    const catways = await Catway.find({ catwayNumber: catwayNumber });

    if (!catways || catways.length === 0) {
      return res.status(404).json({ error: "Catway non trouv√©" });
    }

    res.json(catways);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});




// üìå POST : Ajouter un catway
router.post("/", async (req, res) => {
  try {
    const { catwayNumber, catwayType, catwayState } = req.body;
    const newCatway = new Catway({ catwayNumber, catwayType, catwayState });
    await newCatway.save();
    res.status(201).json(newCatway);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// üìå PUT : Modifier l'√©tat d'un catway par son catwayNumber
router.put("/:id", async (req, res) => {
  try {
    const { catwayState } = req.body;
    // Utilisation de findOneAndUpdate pour trouver par catwayNumber
    const updatedCatway = await Catway.findOneAndUpdate(
      { catwayNumber: req.params.id },
      { catwayState },
      { new: true }
    );
    if (!updatedCatway) return res.status(404).json({ error: "Catway non trouv√©" });
    res.json(updatedCatway);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// üìå DELETE : Supprimer un catway par son catwayNumber
router.delete("/:id", async (req, res) => {
  try {
    // Utilisation de findOneAndDelete pour supprimer par catwayNumber
    const deletedCatway = await Catway.findOneAndDelete({ catwayNumber: req.params.id });
    if (!deletedCatway) return res.status(404).json({ error: "Catway non trouv√©" });
    res.json({ message: "Catway supprim√©" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;
